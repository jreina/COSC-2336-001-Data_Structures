
PF3
Lab3


##############################################################
Part 1

Copy your lab2.cpp program to ~/PF3/lab3/lab2t.cpp

Modify the program to allow it to use a C++ template to
support a linked list, where the data can be any data type.

To make this work, the "main" test driver program
will need to be modified.  Let's just say that we're
going to make a linked list of "double"s.  To do this,
the test program will need to be tweaked as follows:
============================================================
int main(void)
{
    linked_list<double> ll;
    string cmd;
    double d;
    int i;

    while (cin >> cmd >> i >> d) {

        cout << "MAIN: cmd = " << cmd << ", i = " << i
             << ", d = " << d << endl;

        if (cmd == "add")
            ll.add(i, d);
        else if (cmd == "addf")
            ll.add_first(d);
        else if (cmd == "addl")
            ll.add_last(d);
        else if (cmd == "rem")
            ll.remove(i);
        else if (cmd == "remf")
            ll.remove_first();
        else if (cmd == "reml")
            ll.remove_last();
        else if (cmd == "get") {
            d = ll.get(i);
            cout << "get returns: " << d << endl;
        } else if (cmd == "getf") {
            d = ll.get_first();
            cout << "getf returns: " << d << endl;
        } else if (cmd == "getl") {
            d = ll.get_last();
            cout << "getl returns: " << d << endl;
        } else if (cmd == "dump")
            ll.dump();
        else if (cmd == "quit")
            exit(0);
    }
}
============================================================


##############################################################

Part II

Implement a stack class that sits on top of your singly linked
list class (the new, template version).

Use the driver program provided below to test your code.

NOTE:  Just start with your latest/greatest linked_list class,
(with templates) add this main to it, and then add a new "stack"
class to the one file.  Note that the main program doesn't
delcare a linked_list object - instead, it declares an object
of type "stack"!


Put your program in ~/PF3/lab3/lab3.cpp

==============================================================
int main(void)
{
    stack<double> s;
    int n;
    string cmd;
    double d;

    while (cin >> cmd >> d) {

        cout << "MAIN: cmd = " << cmd << ", d = " << d << endl;

        if (cmd == "push")
            s.push(d);
        else if (cmd == "pop") {
            d = s.pop();
            cout << "MAIN: pop = " << d << endl;
        } else if (cmd == "top") {     // returns the value from top of stack,
            d = s.top();        // but DOES NOT REMOVE the item.
            cout << "MAIN: top = " << d << endl;
        } else if (cmd == "quit")
            exit(0);
    }
}
==============================================================